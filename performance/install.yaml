apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultConnection
metadata:
  name: vault-connection
spec:
  address: http://vault.vault-csi-provider.svc.cluster.local:8200
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultAuth
metadata:
  name: vault-auth
spec:
  vaultConnectionRef: vault-connection
  method: kubernetes
  # Mount to use when authenticating to auth method.
  mount: kubernetes
  # Kubernetes specific auth configuration, requires that the Method be set to kubernetes.
  kubernetes:
    # role to use when authenticating to Vault
    role: app
    # ServiceAccount to use when authenticating to Vault
    # it is recommended to always provide a unique serviceAccount per Pod/application
    serviceAccount: demo-app-sa
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: vault-static-secret-v1
spec:
  vaultAuthRef: vault-auth
  mount: secret
  type: kv-v1
  path: docker/demo-app/dockerhub
  destination:
    name: dockerhub-imagepull-secret # Name of the Kubernetes secret
    create: true                   # Create the secret if it doesn't exist
    type: kubernetes.io/dockerconfigjson # Type for Docker registry credentials
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: app-01-bc
spec:
  source:
    type: Git
    git:
      uri: 'https://github.com/openshift/nodejs-ex.git' # Example Node.js app
  strategy:
    type: Source
    sourceStrategy:
      from:
        kind: ImageStreamTag
        name: nodejs:16 # Or your desired builder image from OpenShift namespace
        namespace: openshift
  output:
    to:
      kind: ImageStreamTag
      name: app-01-is:latest
  triggers:
    - type: ConfigChange
    - type: GitHub
      github:
        secret: yourwebhooksecret
    - type: Generic
      generic:
        secret: yourgenericwebhooksecret
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: app-01-dc
spec:
  replicas: 1
  selector:
    app: app-01-dc
  template:
    metadata:
      labels:
        app: app-01-dc
    spec:
      imagePullSecrets:
      - name: dockerhub-imagepull-secret
      containers:
      - name: hello-openshift
        image: openshift/hello-openshift # Example image
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
  triggers:
    - type: ConfigChange # Redeploy if this DC changes
    - type: ImageChange # If using an ImageStream
      imageChangeParams:
        automatic: true
        containerNames:
          - hello-openshift
        from:
          kind: ImageStreamTag
          name: app-01-is:latest # Assuming an ImageStream named 'app-01-is'
          namespace: test-app-01-ns
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: app-01-route
spec:
  to:
    kind: Service
    name: app-01-service
  port:
    targetPort: 80
  # host: app-01-route.apps.your-openshift-cluster.com # Optional: OpenShift will generate one if not provided
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: app-01-cronjob
spec:
  schedule: "*/5 * * * *" # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          imagePullSecrets:
          - name: dockerhub-imagepull-secret
          containers:
          - name: hello
            image: busybox
            imagePullPolicy: IfNotPresent
            args:
            - /bin/sh
            - -c
            - date; echo "Hello from the Kubernetes CronJob"
          restartPolicy: OnFailure
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-01-read-access
subjects:
- kind: ServiceAccount
  name: app-01-sa
roleRef:
  kind: Role
  name: app-01-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: app-01-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-app-sa
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-01-config
data:
  key1: value3
  key2: "multi-line\nvalue"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-01-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app-01
  template:
    metadata:
      labels:
        app: app-01
    spec:
      imagePullSecrets:
      - name: dockerhub-imagepull-secret
      containers:
      - name: nginx
        image: nginxinc/nginx-unprivileged:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
    
    
    
